#pragma kernel ComputeCrater

// Structured Buffer to hold vertex positions

// Crater definition
struct Crater
{
    float3 center;
    float radius;
    float depth;
};

// Buffer for craters
StructuredBuffer<float3> vertices;

RWStructuredBuffer<float> heights;

StructuredBuffer<Crater> craters;

uint numVertices;
uint numCraters;
float floorHeight;
float smoothness;
float rimSteepness;
float rimWidth;


float smoothMin(float a, float b, float k)
{
    float h = max(k - abs(a - b), 0) / k;
    return min(a, b) - h * h * k * 0.25;
}

float smoothMax(float a, float b, float k)
{
    return -smoothMin(-a, -b, k);
}



[numthreads(512, 1, 1)] 
void ComputeCrater(uint id : SV_DispatchThreadID)
{
    if (id >= numVertices)
        return;
   
    
    float3 vertexPos = vertices[id];
    float craterHeight = 0;
    
    float maxCraterHeight = 0;
    bool hasEffect = false;
    
    for (int i = 0; i < numCraters; i++)
    {
        float x = length(vertexPos - craters[i].center) / craters[i].radius;
        
        float cavity = x * x - 1;
        float rimX = min(x - 1 - rimWidth, 0);
        float rim = rimSteepness * rimX * rimX;
        
        float craterShape = smoothMax(cavity, floorHeight, smoothness);
        craterShape = smoothMin(craterShape, rim, smoothness);
        craterHeight += craterShape * craters[i].radius;
        
        if (!hasEffect || craterHeight < maxCraterHeight) 
        {
            maxCraterHeight = craterHeight;
            hasEffect = true;
        }

    }
    
    heights[id] +=  craterHeight;
    
}




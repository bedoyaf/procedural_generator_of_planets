// SphereNoise.compute
#pragma kernel GenerateSphereNoise

StructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;

uint numVertices;
float detailNoiseScale;
float heightMultiplier;
int detailOctaves;
float detailLacunarity;
float detailPersistence;
float3 noiseOffset;
float baseScale;
float detailScale;

float baseNoiseScale;
int baseOctaves;
float baseLacunarity;
float basePersistence;

float detailMultiplier;
float baseMultiplier;


float ridgeScale;
float ridgeMultiplier;
int ridgeOctaves;
float ridgeLacunarity;
float ridgePersistence;
float ridgeMinBase; // Base minimum value for ridge mask
float ridgeStartPower; // Exponent to control sharpness of the ridge mask
float ridgeAttenuationScale; // Controls the scaling of ridge attenuation noise
float ridgeAttenuationFrequency; // Controls the frequency of ridge attenuation noise
float ridgeAttenuationOctaves; // Controls the number of octaves for ridge attenuation noise
float ridgeAttenuationPersistence; // Controls the persistence for ridge attenuation noise

// Simplex noise helper functions
float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x)
{
    return mod289(((x * 34.0) + 10.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
    const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);

    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);

    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy;
    float3 x3 = x0 - D.yyy;

    i = mod289(i);
    float4 p = permute(permute(permute(
                i.z + float4(0.0, i1.z, i2.z, 1.0))
              + i.y + float4(0.0, i1.y, i2.y, 1.0))
              + i.x + float4(0.0, i1.x, i2.x, 1.0));

    float n_ = 0.142857142857;
    float3 ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z * ns.z);

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_);

    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, float4(0.0f, 0.0f, 0.0f, 0.0f));

    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);

    float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}

/*
float fractalNoise(float3 pos)
{
    float total = 0.0;
    float frequency = 1.0;
    float amplitude = 1.0;
    float maxValue = 0.0;

    for (int i = 0; i < octaves; i++)
    {
        total += snoise(pos * frequency) * amplitude;
        maxValue += amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return total / maxValue; // Normalize to [-1, 1] range
}*/
float ridgeNoise(float3 pos, int octaves, float lacunarity, float persistence)
{
    float total = 0.0;
    float amplitude = 0.5;
    float frequency = 1.0;
    float maxValue = 0.0;

    for (int i = 0; i < octaves; i++)
    {
        float n = snoise(pos * frequency);
        n = 1.0 - abs(n); // Invert to create ridges
        n *= n; // Sharpen the ridges

        total += n * amplitude;
        maxValue += amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return total / maxValue;
}

float fbm(float3 pos, int octaves, float lacunarity, float persistence)
{
    float total = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    float maxValue = 0.0;

    for (int i = 0; i < octaves; i++)
    {
        total += snoise(pos * frequency) * amplitude;
        maxValue += amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return total / maxValue;
}

[numthreads(512, 1, 1)]
void GenerateSphereNoise(uint id : SV_DispatchThreadID)
{
    if (id >= numVertices)
        return;

    float3 pos = vertices[id];

    float3 noisePos = pos + noiseOffset;

    // Layer 1: large scale planet shape
    float base = fbm(noisePos * baseScale, baseOctaves, baseLacunarity, basePersistence);

    // Layer 2: detail noise for cliffs and mountains
    float detail = fbm(noisePos * detailScale, detailOctaves, detailLacunarity, detailPersistence);
    
    float ridges = ridgeNoise(noisePos * ridgeScale, ridgeOctaves, ridgeLacunarity, ridgePersistence);

    // Combine them
  //  float n = base * baseMultiplier + detail * detailMultiplier + ridges * ridgeMultiplier;
    
    
    
    
    float ridgeMask = saturate((base - ridgeMinBase) / (1.0 - ridgeMinBase));
    ridgeMask = pow(ridgeMask, ridgeStartPower);

    // Random attenuation noise for ridges (to randomly reduce ridge height)
    float ridgeAttenuation = fbm(noisePos * ridgeAttenuationFrequency, ridgeAttenuationOctaves, 2.0, ridgeAttenuationPersistence); // Applying secondary noise for random attenuation
    ridgeAttenuation = saturate(ridgeAttenuation); // Ensure the value stays between 0 and 1

    // Apply the attenuation to the ridges (randomly lower the ridge heights)
    float maskedRidges = ridges * ridgeMask * ridgeAttenuation * ridgeAttenuationScale;

    
    
    
    
    
//    float n = maskedRidges * ridgeMultiplier;

    float n = base * baseMultiplier + detail * detailMultiplier + maskedRidges * ridgeMultiplier;

    heights[id] += n * heightMultiplier;
}
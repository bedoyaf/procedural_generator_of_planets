#pragma kernel NoiseTerrain

StructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;

uint numVertices;
float noiseScale = 1.0;
float amplitude = 1.0;
float power = 1.0;
float baseHeight = 1.0;

// --- Simple 3D noise based on pseudo-random gradients ---
// (you can swap this out with a proper 3D Perlin/Simplex noise if you want)
float hash(float3 p)
{
    p = frac(p * 0.3183099 + 0.1);
    p *= 17.0;
    return frac(p.x * p.y * p.z * (p.x + p.y + p.z));
}

float noise(float3 p)
{
    float3 i = floor(p);
    float3 f = frac(p);
    f = f * f * (3.0 - 2.0 * f); // Smoothstep interpolation

    float n000 = hash(i + float3(0, 0, 0));
    float n001 = hash(i + float3(0, 0, 1));
    float n010 = hash(i + float3(0, 1, 0));
    float n011 = hash(i + float3(0, 1, 1));
    float n100 = hash(i + float3(1, 0, 0));
    float n101 = hash(i + float3(1, 0, 1));
    float n110 = hash(i + float3(1, 1, 0));
    float n111 = hash(i + float3(1, 1, 1));

    return lerp(
        lerp(lerp(n000, n100, f.x), lerp(n010, n110, f.x), f.y),
        lerp(lerp(n001, n101, f.x), lerp(n011, n111, f.x), f.y),
        f.z);
}

[numthreads(512, 1, 1)]
void NoiseTerrain(uint id : SV_DispatchThreadID)
{
    if (id >= numVertices)
        return;

    float3 vertexPos = vertices[id];

    float3 noiseInput = normalize(vertexPos) * noiseScale;
    float n = noise(noiseInput);

    float h = baseHeight + pow(n, power) * amplitude;

    heights[id] = h;
}

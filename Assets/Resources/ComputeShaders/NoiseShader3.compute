// SphereNoise.compute
#pragma kernel GenerateSphereNoiseTrippy

// Input: Pre-calculated sphere vertices (normalized directions usually)
StructuredBuffer<float3> vertices;
// Output: Height multiplier/offset for each vertex
RWStructuredBuffer<float> heights;

// Basic Parameters
uint numVertices; // Total number of vertices in the buffer
float baseRadius; // The base radius of the sphere before noise

// Noise Parameters
float noiseScale; // Base frequency/scale of the noise
float heightMultiplier; // How much the noise affects the height
float3 noiseOffset; // Allows shifting the noise pattern in 3D space

// FBM (Fractal Brownian Motion) Parameters for multi-layered noise
int octaves; // Number of noise layers (higher = more detail, slower)
float persistence; // How much amplitude decreases for each octave (usually < 1)
float lacunarity; // How much frequency increases for each octave (usually > 1)

// Feature Control Parameters
float ridgeFactor; // Blend factor for ridge noise (0 = normal FBM, 1 = full ridges)
float powerExponent; // Apply pow(noise, exponent) to shape terrain ( > 1 = sharper peaks/flatter valleys, < 1 = smoother hills)


// --- Simplex Noise Implementation (Unchanged from your original) ---
float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float4 permute(float4 x)
{
    return mod289(((x * 34.0) + 10.0) * x);
} // Note: Original had +1.0, common variations exist. Using +10.0 as in original.
float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

// 3D Simplex noise
float snoise(float3 v)
{
    const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);

    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);

    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy;
    float3 x3 = x0 - D.yyy; // Equivalent to x0 - 1.0 + 3.0 * C.xxx

    i = mod289(i);
    float4 p = permute(permute(permute(
                 i.z + float4(0.0, i1.z, i2.z, 1.0))
               + i.y + float4(0.0, i1.y, i2.y, 1.0))
               + i.x + float4(0.0, i1.x, i2.x, 1.0));

    float n_ = 0.142857142857; // 1.0/7.0
    float3 ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z * ns.z); // Floor(p/7*7)

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_); // Mod(j,N)

    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, float4(0.0, 0.0, 0.0, 0.0)); // HTTP https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl

    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);

    float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    // The value 105.0 has been adjusted to 42.0 to approximate output range of [-1, 1] better
    // Simplex noise theoretical range is ~[-1, 1], but practical range might be smaller.
    // Scaling depends on the specific implementation details. 42.0 is a common value.
    return 42.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}
// --- End Simplex Noise ---


// --- Fractal Brownian Motion (FBM) Function ---
// Combines multiple layers (octaves) of noise for more detail
float fbm(float3 pos)
{
    float total = 0.0;
    float frequency = noiseScale;
    float amplitude = 1.0;
    float maxValue = 0.0; // Used for normalizing the result to [-1, 1] roughly

    for (int i = 0; i < octaves; i++)
    {
        total += snoise(pos * frequency + noiseOffset) * amplitude; // Apply offset here per octave? Or once before fbm? Let's do it once before.
                                                                     // Using (pos + noiseOffset) * frequency below is simpler.

        maxValue += amplitude; // Track max possible amplitude
        frequency *= lacunarity; // Increase frequency
        amplitude *= persistence; // Decrease amplitude
    }

    // Normalize the FBM result to be roughly within [-1, 1]
    // This prevents the height from exploding with many octaves
    if (maxValue > 0.0)
    {
        return total / maxValue;
    }
    return 0.0; // Avoid division by zero if octaves is 0 or persistence makes amplitude 0
}


[numthreads(512, 1, 1)]
void GenerateSphereNoiseTrippy(uint id : SV_DispatchThreadID)
{
    // Exit if thread ID is out of bounds
    if (id >= numVertices)
        return;

    // Get the original vertex position (should be normalized for a sphere)
    float3 basePos = vertices[id];

    // Define the position to sample noise from (apply scale and offset once)
    float3 samplePos = basePos * noiseScale + noiseOffset;

    // --- Calculate Noise Value ---
    float noiseValue = 0.0;
    float frequency = 1.0; // Use 1.0 here because noiseScale applied to samplePos
    float amplitude = 1.0;
    float maxValue = 0.0;

    // FBM Loop
    for (int i = 0; i < octaves; i++)
    {
        noiseValue += snoise(samplePos * frequency) * amplitude;

        maxValue += amplitude;
        frequency *= lacunarity;
        amplitude *= persistence;
    }

    // Normalize FBM
    if (maxValue > 0.0)
    {
        noiseValue /= maxValue; // Noise is now roughly in [-1, 1]
    }
    else
    {
        noiseValue = 0.0; // Handle edge case
    }

    // --- Apply Feature Modifications ---

    // 1. Ridge Noise
    // This common technique creates ridges where noise value is close to 0
    // `1.0 - abs(noise)` maps [-1, 1] noise range to [0, 1] range, with peaks at 0.
    // We scale it back to [-1, 1] to blend it properly with the original noise range.
    float ridgeNoise = (1.0 - abs(noiseValue)) * 2.0 - 1.0;
    // Lerp between original FBM noise and the ridge noise based on ridgeFactor
    noiseValue = lerp(noiseValue, ridgeNoise, ridgeFactor);

    // 2. Power Adjustment
    // Remap noise from [-1, 1] to [0, 1] before applying power
    float noise01 = (noiseValue + 1.0) * 0.5;
    // Apply power function (exponent > 1 sharpens peaks/flattens valleys, < 1 smooths)
    float poweredNoise01 = pow(noise01, powerExponent);
    // Remap back to [-1, 1] range
    noiseValue = poweredNoise01 * 2.0 - 1.0;

    // --- Calculate Final Height ---
    // Start with the base radius and add the scaled noise contribution
    // The final noiseValue is in [-1, 1] range after modifications
    heights[id] +=/* baseRadius +*/ noiseValue * heightMultiplier;

    // Alternative: Multiplicative Height (terrain features scale with base radius)
    // heights[id] = baseRadius * (1.0 + noiseValue * heightMultiplier);
    // Choose the one that fits your desired look. Additive is often simpler.
}
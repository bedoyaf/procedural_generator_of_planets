#pragma kernel GenerateSphereNoise

StructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;

uint numVertices;
float3 noiseOffset;
float heightMultiplier;

// --- Continent noise ---
float continentScale;
int continentOctaves;
float continentLacunarity;
float continentPersistence;
float continentStrength;

// --- Ocean flattening ---
uniform float oceanFloorDepth; // How deep the ocean floor can go
uniform float oceanFloorSmoothing; // Controls smoothness of ocean floor
uniform float oceanDepthMultiplier; // Multiplies depth for below-ocean areas

// --- Ridge noise for mountains ---
float mountainScale;
int mountainOctaves;
float mountainLacunarity;
float mountainPersistence;
float mountainStrength;
//float mountainMaskMin;
//float mountainMaskPower;

//ridge mask
float ridgeMaskScale;
int ridgeMaskOctaves;
float ridgeMaskLacunarity;
float ridgeMaskPersistence;
float ridgeMaskThreshold; // e.g. 0.4
float ridgeMaskFalloff;


float smoothMin(float a, float b, float k)
{
    float h = max(k - abs(a - b), 0) / k;
    return min(a, b) - h * h * k * 0.25;
}

float smoothMax(float a, float b, float k)
{
    return -smoothMin(-a, -b, k);
}


// --- Noise utils ---
float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float4 permute(float4 x)
{
    return mod289(((x * 34.0) + 10.0) * x);
}
float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
    const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);
    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy;
    float3 x3 = x0 - D.yyy;
    i = mod289(i);
    float4 p = permute(permute(permute(i.z + float4(0.0, i1.z, i2.z, 1.0)) +
                    i.y + float4(0.0, i1.y, i2.y, 1.0)) +
                    i.x + float4(0.0, i1.x, i2.x, 1.0));
    float n_ = 0.142857142857;
    float3 ns = n_ * D.wyz - D.xzx;
    float4 j = p - 49.0 * floor(p * ns.z * ns.z);
    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_);
    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);
    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);
    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, float4(0.0f, 0.0f, 0.0f, 0.0f));
    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);
    float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}

float fbm(float3 pos, int octaves, float lacunarity, float persistence)
{
    float total = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    float maxValue = 0.0;

    for (int i = 0; i < octaves; i++)
    {
        total += snoise(pos * frequency) * amplitude;
        maxValue += amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return total / maxValue;
}

float smoothRidgeNoise(float3 pos, int octaves, float lacunarity, float persistence)
{
    float total = 0.0;
    float amplitude = 0.5;
    float frequency = 1.0;
    float maxValue = 0.0;

    for (int i = 0; i < octaves; i++)
    {
        float n = snoise(pos * frequency);

        // Instead of harsh abs() ridging, use a smooth bump
        n = (1.0 - abs(n)) * 2.0 - 1.0; // Bring into range [-1, 1]
        n = saturate(n); // Clamp to [0, 1] for ridges
        n = n * n * (3.0 - 2.0 * n); // Smoothstep falloff for organic feel

        total += n * amplitude;
        maxValue += amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return total / maxValue;
}


[numthreads(512, 1, 1)]
void GenerateSphereNoise(uint id : SV_DispatchThreadID)
{
    if (id >= numVertices)
        return;

    float3 pos = vertices[id];
    float3 noisePos = pos + noiseOffset;

    // Continent base shape
    float continent = fbm(noisePos * continentScale, continentOctaves, continentLacunarity, continentPersistence);

    // Flatten ocean floors
    float oceanMask = -oceanFloorDepth + continent * 1.0; //bylo 0.15
    continent = smoothMax(continent, oceanMask, oceanFloorSmoothing);
    continent *= (continent < 0) ? 1 + oceanDepthMultiplier : 1;

    // Mountains masked by continent height
    float ridge = smoothRidgeNoise(noisePos * mountainScale, mountainOctaves, mountainLacunarity, mountainPersistence);
    
    float ridgeMask = fbm(pos * ridgeMaskScale, ridgeMaskOctaves, ridgeMaskLacunarity, ridgeMaskPersistence);
    ridgeMask = ridgeMask * 0.5 + 0.5;
    
    float landMask = smoothstep(0.0, 0.3, continent);
// Soft threshold to create a smooth transition
    ridgeMask = saturate(ridgeMask /*- ridgeMaskThreshold*/)/**ridgeMaskFalloff*/;
    
    ridgeMask = pow(ridgeMask, 0.5);
    
 //   float ridgeMask2 = pow(saturate((continent - 0.4) / (1.0 - 0.4)), 3);

    
    
 //   float safeLand = smoothMax(continent, 0.25, 0.05); // trochu zvedni pevninu
  //  float ridgeStrengthSkibid = smoothstep(0.0, 1.0, safeLand); 

//    ridge = ridge * ridgeStrengthSkibid;
    
    
 //  heights[id] += ridgeMask;
    
   // float maskedRidges = smoothMax(0.0, ridge * mountainStrength * continent, 0.01);
    float maskedRidges = ridge * mountainStrength * ridgeMask* landMask;


 //   float maskedRidges =  (continent > 0.0) ? ridge * mountainStrength : 0.0;//ridge * ridgeMask * mountainStrength;
    
    
    

    float height = continent * continentStrength + maskedRidges;
    

   heights[id] += height * heightMultiplier * 0.1;
}
